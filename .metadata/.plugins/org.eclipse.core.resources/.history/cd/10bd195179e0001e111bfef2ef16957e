package com.venu.insurance.service;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.stereotype.Service;

import com.lowagie.text.Document;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.pdf.CMYKColor;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import com.venu.insurance.dto.SearchDto;
import com.venu.insurance.model.CitizenPlans;
import com.venu.insurance.repo.CitizenPlansRepo;
import com.venu.insurance.util.ExcelGenerator;

import jakarta.servlet.ServletOutputStream;
import jakarta.servlet.http.HttpServletResponse;

@Service
public class CitizenPlanServiceImpl implements CitizenPlanService{
	
	@Autowired
	CitizenPlansRepo citizenPlansRepo;
	
	@Autowired
	ExcelGenerator excelGenerator;

	@Override
	public List<String> getAllPlans() throws Exception {
	 List<String> bo = citizenPlansRepo.getAllPlanNames();
	 return bo;
	}

	@Override
	public List<String> getAllPlansStatus() throws Exception {
		 List<String> bo = citizenPlansRepo.getAllPlanStatus();
		 return bo;
	}
	
	@Override
	public List<CitizenPlans> getAllData() throws Exception {
		 List<CitizenPlans> bo = citizenPlansRepo.findAll();
		 return bo;
	}

	@Override
	public List<CitizenPlans> handleSearch(SearchDto searchDto) throws Exception {
		 List<CitizenPlans> bo= new ArrayList<CitizenPlans>();
		 CitizenPlans entity = new CitizenPlans();
		 if(searchDto.getPlanNAme() != null && !searchDto.getPlanNAme().isEmpty()) {
			 entity.setCitizenPlan(searchDto.getPlanNAme());
		 }
		 if(searchDto.getPlanStatus() != null && !searchDto.getPlanStatus().isEmpty()) {
			 entity.setCitizenSratus(searchDto.getPlanStatus());
		 }
		 if(searchDto.getGender() != null && !searchDto.getGender().isEmpty()) {
			 entity.setGender(searchDto.getGender());
		 }
		 if(searchDto.getStartDate() != null && !searchDto.getStartDate().isEmpty()) {
			 String sDate = searchDto.getStartDate();
			 DateFormat formatter = new SimpleDateFormat("d-MMM-yyyy");
			 Date date = formatter.parse(sDate);
			 entity.setPlanStartDate(date);
		 }
		 if(searchDto.getEndDate() != null && !searchDto.getEndDate().isEmpty()) {
			 String eDate = searchDto.getEndDate();
			 DateFormat formatter = new SimpleDateFormat("d-MMM-yyyy");
			 Date date = formatter.parse(eDate);
			 entity.setPlanEndDate(date);
		 }
		
			bo = citizenPlansRepo.findAll(Example.of(entity)); 
		 
		 return bo;
	}
	
	@Override
	public boolean exportExacel(HttpServletResponse response) throws Exception{
		excelGenerator.geratorExcel(response);
		return true;
	}

	@Override
	public void exportPdf(HttpServletResponse response) throws Exception {
		// Creating the Object of Document
				Document document = new Document(PageSize.A4);
				
				// Getting instance of PdfWriter
				PdfWriter.getInstance(document, response.getOutputStream());
				
				// Opening the created document to modify it
				document.open();

				// Creating font
				// Setting font style and size
				Font fontTiltle = FontFactory.getFont(FontFactory.TIMES_ROMAN);
				Paragraph paragraph = new Paragraph("List Of Students", fontTiltle);
				document.add(paragraph);
				
				// Creating a table of 3 columns
				PdfPTable table = new PdfPTable(6);
				// Setting width of table, its columns and spacing
				table.addCell("Id");
				table.addCell("Citizen Name");
				table.addCell("Plan Name");
				table.addCell("Plan Status");
				table.addCell("Plan End Date");
				table.addCell("Plan Start Date");
				table.addCell("Benefit amt");
				
				List<CitizenPlans> bo = citizenPlansRepo.findAll();
				for(CitizenPlans plan: bo) {
					table.addCell(plan.getCitizenId().toString());
					table.addCell(plan.getCitizenName());
					table.addCell(plan.getCitizenPlan());
					table.addCell(plan.getCitizenSratus());
					table.addCell(plan.getPlanStartDate()+ "");
					table.addCell(plan.getPlanEndDate() + "");
					table.addCell(plan.getBenifitAmt()+ "");
				}

				document.add(table);
				document.close();

				
				
				
		
	}

	
	
	
	
	

}
